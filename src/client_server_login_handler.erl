%%%-------------------------------------------------------------------
%%% @author  Anton Vilhelm Ásgeirsson <anton.v.asgeirsson@gmail.com>
%%% @copyright (C) 2020, Anton Vilhelm Ásgeirsson
%%% @doc Login/Logout methods of the Matrix Client-Server specification
%%% @end
%%%-------------------------------------------------------------------

-module(client_server_login_handler).
-compile(export_all).

-record(state, {op}).

init(Req, Opts) ->
    [Op | _] = Opts,
    State = #state{op=Op},
    {cowboy_rest, Req, State}.

allowed_methods(Req, State) ->
    Methods = [<<"GET">>, <<"POST">>, <<"OPTIONS">>],
    {Methods, Req, State}.

content_types_provided(Req, State) ->
    {[
      {<<"application/json">>, handle_login_request}
     ], Req, State}.

content_types_accepted(Req, State) ->
    {[
      {<<"application/json">>, handle_login_request}
     ], Req, State}.

handle_login_request(Req, #state{op=Op} = State) ->
    {Body, Req1, State1} = case Op of
                               login ->
                                   handle_login(Req, State);
                               logout ->
                                   handle_logout(Req, State);
                               logout_all ->
                                   handle_logout_all(Req, State)
                           end,
    {Body, Req1, State1}.

%%%-------------------------------------------------------------------
%% 5.4.1 GET /_matrix/client/r0/login
%% Gets the homeserver's supported login types to authenticate users.
%% Clients should pick one of these and supply it as the type when
%% logging in.
%%%-------------------------------------------------------------------
handle_login(Req=#{method := <<"GET">>}, State) ->
    % Need to handle both GET and POST here
    Body = <<"{\"login_get_implement\": \"me\"}">>,
    {Body, Req, State};

%%%-------------------------------------------------------------------
%% 5.4.2 POST /_matrix/client/r0/login
%% Authenticates the user, and issues an access token they can use to
%% authorize themself in subsequent requests.
%%
%% If the client does not supply a device_id, the server must
%% auto-generate one.
%%
%% The returned access token must be associated with the device_id
%% supplied by the client or generated by the server. The server may
%% invalidate any access token previously associated with that device.
%% See https://matrix.org/docs/spec/client_server/latest#relationship-between-access-tokens-and-devices
%%%-------------------------------------------------------------------
handle_login(Req=#{method := <<"POST">>}, State) ->
    Body = <<"{\"login_post_implement\": \"me\"}">>,
    cowboy_req:reply(200, #{<<"content-type">> => <<"application/json">>}, Body, Req),
    {stop, Req, State}.

%%%-------------------------------------------------------------------
%% 5.4.3 POST /_matrix/client/r0/logout
%% Invalidates an existing access token, so that it can no longer be
%% used for authorization. The device associated with the access token
%% is also deleted. Device keys for the device are deleted alongside
%% the device.
%%%-------------------------------------------------------------------
handle_logout(Req=#{method := <<"POST">>}, State) ->
    Body = <<"{\"logout_implement\": \"me\"}">>,
    cowboy_req:reply(200, #{<<"content-type">> => <<"application/json">>}, Body, Req),
    {stop, Req, State};
handle_logout(Req=#{method := <<"OPTIONS">>}, State) ->
    ematrixd:handle_cors(<<"">>, Req),
    {stop, Req, State}.

%%%-------------------------------------------------------------------
%% 5.4.4 POST /_matrix/client/r0/logout/all
%% Invalidates all access tokens for a user, so that they can no
%% longer be used for authorization. This includes the access token
%% that made this request. All devices for the user are also deleted.
%% Device keys for the device are deleted alongside the device.
%%
%% This endpoint does not require UI authorization because UI
%% authorization is designed to protect against attacks where the
%% someone gets hold of a single access token then takes over the
%% account.This endpoint invalidates all access tokens for the user,
%% including the token used in the request, and therefore the attacker
%% is unable to take over the account in this way.
%%%-------------------------------------------------------------------
handle_logout_all(Req=#{method := <<"POST">>}, State) ->
    % Need to handle POST here and disallow GET
    Body = <<"{\"logout_all_implement\": \"me\"}">>,
    {Body, Req, State}.
